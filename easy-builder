#! /usr/bin/env bash

# This script is meant to be kept small and simple
# If you think about adding features, it's probably a bad idea

set -e # exit if a command fails
set -o pipefail # Will return the exit status of make if it fails

project_source_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

build_dir="${project_source_dir}/build${SUBDIR:+/${SUBDIR}}"
install_dir="${project_source_dir}/install${SUBDIR:+/${SUBDIR}}"

install_target='install/strip'
build_type='Release'

declare -a cmake_opts
case "$(uname -s)" in
	'Linux')
		nproc='egrep "^processor" /proc/cpuinfo | wc -l'
		;;
	'FreeBSD')
		nproc='sysctl -n hw.ncpu'

		if [ -f "$(ls '/usr/local/bin/g++'* | sort | tail -n1)" ]
		then
			gcc_version="$(ls '/usr/local/bin/g++'* | sort | tail -n1 | sed -e 's/.*[^0-9]\([0-9][0-9]*\)$/\1/')"
			cmake_opts[${#cmake_opts[@]}]="-DCMAKE_C_COMPILER=/usr/local/bin/gcc${gcc_version}"
			cmake_opts[${#cmake_opts[@]}]="-DCMAKE_CXX_COMPILER=/usr/local/bin/g++${gcc_version}"
		else
			printf "WARNING: GCC is recommended: if build fails, install GCC and retry\n" >&2
		fi
		;;
	'Darwin')
		nproc='sysctl -n hw.ncpu'

		if [ -f "$(ls '/usr/local/bin/g++-'* | sort | tail -n1)" ]
		then
			gcc_version="$(ls '/usr/local/bin/g++-'* | sort | tail -n1 | sed -e 's/.*[^0-9]\([0-9][0-9]*\)$/\1/')"
			cmake_opts[${#cmake_opts[@]}]="-DCMAKE_C_COMPILER=/usr/local/bin/gcc-${gcc_version}"
			cmake_opts[${#cmake_opts[@]}]="-DCMAKE_CXX_COMPILER=/usr/local/bin/g++-${gcc_version}"
		else
			printf "WARNING: GCC is recommended: if build fails, install GCC and retry\n" >&2
		fi
		;;
	'MSYS_NT-'*)
		nproc='echo "${NUMBER_OF_PROCESSORS}"'
		;;
	'CYGWIN_NT-'*|'MINGW'*'_NT-'*)
		nproc='echo "${NUMBER_OF_PROCESSORS}"'
		printf "WARNING: system is not tested: if build fails, use MSYS2 instead\n" >&2
		;;
	*)
		nproc='true'
		printf "WARNING: system is not tested\n" >&2
		;;
esac

if command -v 'nproc' >/dev/null
then
	job_count="$(nproc)"
else
	job_count="$(sh -c "${nproc}")"
fi

job_count="${job_count:-4}"

declare -a cmake_user_opts
while [ ! -z "${1}" ]
do
	case "${1}" in
	'-j'*)
		job_count="${1:2}"
		shift
		;;
	'--debug')
		install_target='install'
		build_type='Debug'
		shift
		;;
	*)
	cmake_user_opts[${#cmake_user_opts[@]}]="${1}"
	shift
		;;
	esac
done

declare -a fetch_submodules_cmd
for submodule_file in 'libs/crunch/inc/crn_decomp.h' \
	'tools/unvanquished/daemonmap/tools/quake3/q3map2/main.c'
do
	if ! [ -f "${project_source_dir}/${submodule_file}" ]
	then
		fetch_submodules_cmd=(git -C "${project_source_dir}" submodule update --init --recursive)
	fi
done

set -x

"${fetch_submodules_cmd[@]}"

cmake \
	-G'Unix Makefiles' \
	-S"${project_source_dir}" \
	-B"${build_dir}" \
	-D'CMAKE_INSTALL_PREFIX'="${install_dir}" \
	-D'CMAKE_BUILD_TYPE'="${build_type}" \
	"${cmake_opts[@]}" \
	"${cmake_user_opts[@]}" \
	"${project_source_dir}"

cmake \
	--build "${build_dir}" \
	-- \
	-j"${job_count}" \
	"${install_target}"
